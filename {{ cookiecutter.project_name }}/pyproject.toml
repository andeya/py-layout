{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3': 'License :: OSI Approved :: BSD License',
    'GNU GPL v3.0': 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
    'Apache Software License 2.0': 'License :: OSI Approved :: Apache Software License',
} -%}
{%- set python_version_splitted = cookiecutter.minimal_python_version.split('.') | map('int') | list -%}
# Poetry pyproject.toml: https://python-poetry.org/docs/pyproject/
[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "{{ cookiecutter.package_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
authors = ["{{ cookiecutter.organization }} <{{ cookiecutter.email }}>"]
license = "{{ cookiecutter.license }}"
repository = "https://github.com/{{ cookiecutter.github_name }}/{{ cookiecutter.project_name }}"
homepage = "https://github.com/{{ cookiecutter.github_name }}/{{ cookiecutter.project_name }}"

# Keywords description https://python-poetry.org/docs/pyproject/#keywords
keywords = []  #! Update me

# Pypi classifiers: https://pypi.org/classifiers/
classifiers = [  #! Update me
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "{{ license_classifiers[cookiecutter.license] }}",
  "Programming Language :: Python :: 3",
  {%- for minor_version in cookiecutter._all_python_minor_version if minor_version >= python_version_splitted[1] %}
  "Programming Language :: Python :: 3.{{ minor_version }}",{% endfor %}
]

{% if cookiecutter.project_mode == 'bin' -%}[tool.poetry.scripts]
# Entry points for the package https://python-poetry.org/docs/pyproject/#scripts
"{{ cookiecutter.package_name }}" = "{{ cookiecutter.package_name }}.__main__:main"{%- endif %}

{% if cookiecutter.using_tsinghua_image_source -%}
[[tool.poetry.source]]
name = "tsinghua"
url = "https://pypi.tuna.tsinghua.edu.cn/simple"
priority = "primary"
{%- endif %}

[tool.poetry.dependencies]
python = "^{{ cookiecutter.minimal_python_version }}"
{% if cookiecutter.minimal_python_version == '3.7' -%}importlib_metadata = {version = "^4.5.0", python = "<3.8"}{%- endif %}
{%+ if cookiecutter.project_mode == 'bin' -%}
typer = {extras = ["all"], version = "^0.4.0"}
rich = "^10.14.0"
{%- endif %}

[tool.poetry.dev-dependencies]
packaging = "^23.1"
poetry-plugin-export = "^1.7.1"
pytest = "^8.1.1"
pytest-html = "^4.1.1"
pytest-cov = "^5.0.0"
bandit = "^1.7.1"
ruff = "^0.1.6"

mkdocs = "1.5.3"
mkdocs-include-markdown-plugin = "6.0.5"
mkdocs-material = "9.4.14"
mkdocstrings = { version = "0.24.3", extras = ["python"] }
mkdocstrings-python = "1.10.0"
mkdocs-material-extensions = "1.3.1"
mkdocs-autorefs = "1.0.1"

{% if cookiecutter.install_pre_commit %}pre-commit = "^2.21.0"{% endif %}
{% if cookiecutter.install_coverage -%}
coverage = "^6.1.2"
coverage-badge = "^1.1.0"
{%- endif %}
{% if cookiecutter.install_safety %}safety = "^2.3.5"{% endif %}
{% if cookiecutter.install_darglint %}darglint = "^1.8.1"{% endif %}

[tool.ruff]
# https://docs.astral.sh/ruff/settings
line-length = 88

# Exclude a variety of commonly ignored directories.
respect-gitignore = true
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

[tool.ruff.lint]
# https://beta.ruff.rs/docs/rules/
ignore-init-module-imports = true
select = ["E", "W", "F", "I"]
extend-select = ["I"]
ignore = ["F401"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pytest.ini_options]
# https://docs.pytest.org/en/6.2.x/customize.html#pyproject-toml
# Directories that are not visited by pytest collector:
norecursedirs =["hooks", "*.egg", ".eggs", "dist", "build", "docs", ".tox", ".git", "__pycache__"]
doctest_optionflags = ["NUMBER", "NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]

# Extra options:
addopts = [
  "--strict-markers",
  "--tb=short",
  "--doctest-modules",
  "--doctest-continue-on-failure",
]

{% if cookiecutter.install_coverage -%}
# https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
source = ["tests"]
branch = true

[tool.coverage.paths]
source = ["{{ cookiecutter.package_name }}"]

[tool.coverage.report]
fail_under = 50
show_missing = true
{%- endif %}